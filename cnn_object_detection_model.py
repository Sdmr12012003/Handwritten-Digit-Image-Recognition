# -*- coding: utf-8 -*-
"""CNN_Object_Detection_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U2Ea4je2-IU6Vt4G-tno7n_QBvakyeqk
"""

# Commented out IPython magic to ensure Python compatibility.
from tensorflow import keras
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Activation , Dropout , Flatten
from tensorflow.keras.layers import Conv2D , MaxPooling2D

import matplotlib.pyplot as plt
# %matplotlib inline

(x_train,y_train),(x_test,y_test) = cifar10.load_data()
print('x_train shape:',x_train.shape)
print(x_train.shape[0] , 'train samples')
print(x_test.shape[0], 'test samples')

x_train[444].shape

print(y_train[444])
plt.imshow(x_train[444])

y_train

num_classes = 10
# converting to one-hot-encoded form output
y_train = keras.utils.to_categorical(y_train,num_classes)
y_test = keras.utils.to_categorical(y_test,num_classes)

y_train[444]

from numpy import float32
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255 #to make every pixel value <1 & > and all pixel value will be from 0 - 255
x_test /= 255

x_train.shape

#CREATING CNN-ARCHITECTURE COMBINED WITH DEEP-L-SEQUENTIAL NEURAL NETWORK

model_1 = Sequential()

model_1.add(Conv2D(32 , (5,5) , strides = (2,2) , padding = 'same' ,input_shape = x_train.shape[1:]))
model_1.add(Activation('relu'))

model_1.add(Conv2D(32, (5,5) , strides = (2,2)))
model_1.add(Activation('relu'))

model_1.add(MaxPooling2D(pool_size = (2,2)))
model_1.add(Dropout(0.25))

model_1.add(Flatten())
model_1.add(Dense(512))
model_1.add(Activation('relu'))
model_1.add(Dropout(0.5))
model_1.add(Dense(num_classes))
model_1.add(Activation('softmax'))

model_1.summary()

#IMPLEMENTATION OF MODEL
batch_size = 32

opt = keras.optimizers.RMSprop(learning_rate = 0.005 , weight_decay = 1e-6)

model_1.compile (loss = 'categorical_crossentropy' , optimizer = opt, metrics = ['accuracy'])

model_1.fit(x_train , y_train , batch_size= batch_size , epochs = 15, validation_data=(x_test, y_test), shuffle = True)

import numpy as np

y_pred_prob = model_1.predict(x_test)
y_pred_classes = np.argmax(y_pred_prob, axis=1)
y_pred_classes

# BUILDING MORE COMPLICATED CNN + Dense Classification NEURAL NETWORK ARCHITECTURE
model_2 = Sequential()

model_2.add(Conv2D(32 , (3,3) , padding = 'same' ,input_shape = x_train.shape[1:]))
model_2.add(Activation ('relu'))
model_2.add(Conv2D(32 , (3,3)))
model_2.add(Activation ("relu"))
model_2.add(MaxPooling2D(pool_size=(2,2)))
model_2.add(Dropout(0.25))

model_2.add(Conv2D(64 , (3,3) , padding = 'same'))
model_2.add(Activation('relu'))
model_2.add(Conv2D(64 , (3,3)))
model_2.add(Activation ("relu"))
model_2.add(MaxPooling2D(pool_size=(2,2)))
model_2.add(Dropout(0.25))

model_2.add(Flatten())
model_2.add(Dense(512))
model_2.add(Activation('relu'))
model_2.add(Dropout(0.5))
model_2.add(Dense(num_classes))
model_2.add(Activation('softmax'))

model_2.summary()

batch_size = 32

opt = keras.optimizers.RMSprop(learning_rate = 0.005 )

model_1.compile (loss = 'categorical_crossentropy' , optimizer = opt, metrics = ['accuracy'])

model_1.fit(x_train , y_train , batch_size= batch_size , epochs = 15, validation_data=(x_test, y_test), shuffle = True)

